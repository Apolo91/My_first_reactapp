{"version":3,"sources":["component/Profile/Profile.module.css","component/Header/header.module.css","component/Navbar/Navbar.module.css","component/Profile/MyPosts/MyPosts.module.css","component/Profile/MyPosts/Post/Post.module.css","component/Header/header.jsx","component/Navbar/Navbar.jsx","component/Profile/MyPosts/Post/Post.jsx","component/Profile/MyPosts/MyPosts.jsx","component/Profile/Profile.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","s","header","src","alt","Navbar","nav","href","Post","post","message","like","MyPosts","wrapper_post","name","id","cols","rows","Profile","profile","ava","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,IAAM,uB,kBCA3DD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,IAAM,sB,gBCAxBD,EAAOC,QAAU,CAAC,aAAe,gC,gBCAjCD,EAAOC,QAAU,CAAC,KAAO,qB,+KCaVC,EAXA,SAACC,GACZ,OACI,4BAAQC,UAAWC,IAAEC,QACjB,yBAAKC,IAAI,yHAAyHC,IAAI,KAD1I,Y,gBCaOC,EAfA,SAACN,GACZ,OACI,yBAAKC,UAAWC,IAAEK,KACd,4BACI,4BAAI,uBAAGC,KAAK,KAAR,YACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,gB,gDCGLC,EAXF,SAACT,GACV,OACI,yBAAKC,UAAWC,IAAEQ,MACd,yBAAKN,IAAI,4HAA4HC,IAAI,KACxIL,EAAMW,QACf,6BAAK,wCAAcX,EAAMY,SCWdC,EAfC,SAACb,GACb,OACI,yBAAKC,UAAWC,IAAEY,cAAlB,WAEI,6BACC,8BAAUC,KAAK,GAAGC,GAAG,GAAGC,KAAK,KAAKC,KAAK,MACvC,6CAED,kBAAC,EAAD,CAAMP,QAAQ,kBAAkBC,KAAK,OACrC,kBAAC,EAAD,CAAMD,QAAQ,qBAAqBC,KAAK,SCKrCO,EAdC,SAACnB,GACb,OACI,yBAAKC,UAAWC,IAAEkB,SAClB,yBAAKhB,IAAI,wIAAwIC,IAAI,KACrJ,yBAAKJ,UAAWC,IAAEmB,KAAlB,qBAGA,kBAAC,EAAD,QCMOC,EAVH,SAACtB,GACX,OACE,yBAAKC,UAAU,eACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAgBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c8ff6cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2YGt9\",\"ava\":\"Profile_ava__1Tlf5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1d4qC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3Bmxc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_post\":\"MyPosts_wrapper_post__2uP0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__28iDt\"};","import React from 'react';\nimport s from \"./header.module.css\";\n\nconst Header = (props) => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://st2.depositphotos.com/5904380/12124/v/950/depositphotos_121244762-stock-illustration-logo-industry-factory.jpg\" alt=\"\" />\n            Welcome\n        </header>\n        \n    );\n}\n\n\nexport default Header;  ","import React from 'react';\nimport s from \"./Navbar.module.css\";\n\nconst Navbar = (props) => {\n    return (\n        <nav className={s.nav}>\n            <ul>\n                <li><a href=\"#\">Profile</a></li>\n                <li><a href=\"#\">Messages</a></li>\n                <li><a href=\"#\">News</a></li>\n                <li><a href=\"#\">Music</a></li>\n                <li><a href=\"#\">Settings</a></li>\n            </ul>\n        </nav>\n    );\n}\n\n\nexport default Navbar;  ","import React from 'react';\nimport s from \"./Post.module.css\";\n\nconst Post = (props) => {\n    return (\n        <div className={s.post}>\n            <img src=\"https://toptos.com.ua/content/images/5/populyarnyy-popsoket-pop-socket-dlya-parnya-dart-veyder-56860954500598_small11.jpg\" alt=\"\" />\n            {props.message}\n    <div><span>like : {props.like}</span></div>\n        </div>\n    );\n}\n\n\nexport default Post;  ","import React from 'react';\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\"\n\nconst MyPosts = (props) => {\n    return (\n        <div className={s.wrapper_post}>\n            My posts\n            <div >\n             <textarea name=\"\" id=\"\" cols=\"60\" rows=\"5\"></textarea> \n             <button>Add post</button>  \n            </div>\n            <Post message=\"Hi,how are you?\" like='15'/>\n            <Post message=\"It's my first post\" like='35'/>\n            </div>         \n    );\n}\n\n\nexport default MyPosts;  ","import React from 'react';\nimport s from \"./Profile.module.css\";\nimport MyPosts  from './MyPosts/MyPosts'\n\nconst Profile = (props) => {\n    return (\n        <div className={s.profile}>\n        <img src=\"https://images.unsplash.com/photo-1520531158340-44015069e78e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjI0MX0&auto=format&fit=crop&w=1438&q=80\" alt=\"\" />  \n        <div className={s.ava}>\n         ava + description   \n        </div>\n        <MyPosts />   \n        </div> \n            \n    );\n}\n\n\nexport default Profile;  ","import React from 'react';\nimport './App.css';\nimport Header from './component/Header/header';\nimport Navbar from  './component/Navbar/Navbar';\nimport Profile from './component/Profile/Profile'\n\n\nconst App = (props) => {\n  return (\n    <div className=\"app-wrapper\">\n    <Header />\n    <Navbar />\n    <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n    module.hot.accept();\n}\n"],"sourceRoot":""}