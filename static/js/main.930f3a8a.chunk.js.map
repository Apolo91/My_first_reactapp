{"version":3,"sources":["component/Dialogs/Dialogs.module.css","component/Navbar/Friends/Friends.module.css","component/Profile/MyPosts/Post/Post.module.css","component/Profile/ProfileInfo/ProfileInfo.module.scss","component/Header/header.module.css","component/Navbar/Navbar.module.css","component/Navbar/Friends/Friend/Friend.module.css","component/Profile/MyPosts/MyPosts.module.css","component/Music/Music.module.css","component/News/News.module.css","component/Settings/Settings.module.scss","serviceWorker.js","redux/state.js","component/Header/header.jsx","component/Navbar/Friends/Friend/Friend.jsx","component/Navbar/Friends/Friends.jsx","component/Navbar/Navbar.jsx","component/Profile/MyPosts/Post/Post.jsx","component/Profile/MyPosts/MyPosts.jsx","component/Profile/ProfileInfo/ProfileInfo.jsx","component/Profile/Profile.jsx","component/Dialogs/DialogItem/DialogItem.jsx","component/Dialogs/Message/Message.jsx","component/Dialogs/Dialogs.jsx","component/Music/Music.jsx","component/News/News.jsx","component/Settings/Settings.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","rerenderEntiretree","console","log","state","NavbarPage","Friends","id","name","ProfilePage","PostData","message","like","newPostText","DialogsPage","DialogsData","MessageData","addPost","newPost","push","updatePostText","newText","Header","props","className","s","header","src","alt","Friend","friend","countFriends","map","p","friends","friends_wrap","Navbar","nav","to","Post","post","MyPosts","Posts","NewPostElement","React","createRef","wrapper_post","onChange","text","current","value","ref","cols","rows","onClick","ProfileInfo","profile","ava","Profile","DialogItem","path","dialog","Message","Dialogs","dialogs","d","messages","m","dialogsItems","messagesItems","alert","Music","music","News","news","Settings","settings","App","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.930f3a8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__y8tne\",\"dialogsItems\":\"Dialogs_dialogsItems__2boNC\",\"messagesItems\":\"Dialogs_messagesItems__14XTq\",\"dialog\":\"Dialogs_dialog__2ALfl\",\"message\":\"Dialogs_message__JO2PK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__1aS5W\",\"friends_wrap\":\"Friends_friends_wrap__aCFxO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__28iDt\",\"like\":\"Post_like__2akoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"ProfileInfo_ava__398L5\",\"profile\":\"ProfileInfo_profile__1PiDD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1d4qC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3Bmxc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friend_friend__3Dv2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_post\":\"MyPosts_wrapper_post__2uP0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__3O5SO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__3BMLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__3oUvI\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let rerenderEntiretree = () => {\n    console.log('state changed');\n}\n\n\nlet state = {\n    NavbarPage : {\n        Friends : [\n            { id: 1, name: 'Andrey' },\n            { id: 2, name: 'Anna' },\n            { id: 3, name: 'Viktor' },\n           \n           \n        ]\n    },\n    ProfilePage : {\n        PostData : [\n            { id: 1, message: 'Hi,how are you?', like: 15 },\n            { id: 2, message: 'It\\'s my first post', like: 35 },\n            { id: 3, message: 'It\\'s my first post', like: 35 },\n            { id: 4, message: 'It\\'s my first post', like: 35 },\n        ],\n        newPostText: \"it-kamasutra.com\"\n    },\n    DialogsPage : {\n        DialogsData : [\n            { id: 1, name: 'Andrey' },\n            { id: 2, name: 'Victor' },\n            { id: 3, name: 'Olga' },\n            { id: 4, name: 'Anna' },\n            { id: 5, name: 'Egor' },\n            { id: 6, name: 'Egor' },\n        ],\n        MessageData : [\n            { id: 1, message: 'Hi!' },\n            { id: 2, message: 'How are you?' },\n            { id: 3, message: 'It\\'s fine' },\n            { id: 4, message: 'Yo!' },\n            { id: 5, message: 'Yo!' },\n            { id: 6, message: 'Yo!' },\n        ]\n\n    }\n\n}\n\nexport const addPost = () => {\n    let newPost = {\n        id : 5,\n        message : state.ProfilePage.newPostText,\n        like : 0\n    };\n    state.ProfilePage.PostData.push(newPost);\n    state.ProfilePage.newPostText = '';\n    rerenderEntiretree(state);\n}\n\n\nexport const updatePostText = (newText) => {\n    state.ProfilePage.newPostText = newText;\n    rerenderEntiretree(state);\n}\n\nexport const subscribe = (observer) => {\n    rerenderEntiretree = observer;\n}\n\nexport default state;","import React from 'react';\nimport s from \"./header.module.css\";\n\nconst Header = (props) => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://st2.depositphotos.com/5904380/12124/v/950/depositphotos_121244762-stock-illustration-logo-industry-factory.jpg\" alt=\"\" />\n            Welcome\n        </header>\n\n    );\n}\n\n\nexport default Header;  ","import React from 'react';\nimport s from \"./Friend.module.css\";\n\nconst Friend = (props) => {\n    return(\n    <div className={s.friend}>\n      {props.name}\n    </div>\n    );\n}\n\n\nexport default Friend;  ","import React from 'react';\nimport s from \"./Friends.module.css\";\nimport Friend from './Friend/Friend'\n\nconst Friends = (props) => {\n    let countFriends = props.state.map(p => <Friend name={p.name} />)\n    return (\n        <div className={s.friends}>\n            \n        Friends            \n\n        <div className={s.friends_wrap} >\n            \n            {countFriends}\n        </div>\n        </div>\n    );\n}\n\n\nexport default Friends;  ","import React from 'react';\nimport s from \"./Navbar.module.css\";\nimport { NavLink } from 'react-router-dom';\nimport Friends from './Friends/Friends';\nconst Navbar = (props) => {\n    return (\n        <nav className={s.nav}>\n            <ul>\n                <li><NavLink to=\"/Profile\">Profile</NavLink></li>\n                <li><NavLink to=\"/Dialogs\">Messages</NavLink></li>\n                <li><NavLink to=\"/News\">News</NavLink></li>\n                <li><NavLink to=\"/Music\">Music</NavLink></li>\n                <li><NavLink to=\"/Settings\">Settings</NavLink></li>\n            </ul>\n            <Friends state={props.state.Friends}/>\n        </nav>\n\n    );\n}\n\n\nexport default Navbar;  ","import React from 'react';\nimport s from \"./Post.module.css\";\n\nconst Post = (props) => {\n    return (\n        <div className={s.post}>\n            <img src=\"https://toptos.com.ua/content/images/5/populyarnyy-popsoket-pop-socket-dlya-parnya-dart-veyder-56860954500598_small11.jpg\" alt=\"\" />\n                <div>\n                    {props.message}\n                </div>\n            <div className={s.like}><span>like: </span>{props.like}</div>\n        </div>\n    );\n}\n\n\nexport default Post;  ","import React from 'react';\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\"\n\n\n\nconst MyPosts = (props) => {\n\n    let Posts = props.post.map(p => <Post message={p.message} like={p.like} />)\n\n    let NewPostElement = React.createRef();\n\n    let AddPost = () => {\n       \n        props.addPost();\n        \n    }\n\n    let onPostChange = () => {\n        let text = NewPostElement.current.value;\n        props.updatePostText(text);\n    }\n\n    return (\n        <div className={s.wrapper_post}>\n            <h3>My posts</h3>\n            <div>\n                <textarea  onChange={onPostChange} ref={NewPostElement} cols=\"60\" rows=\"6\" \n                value={props.newPostText} />\n                <div><button onClick={AddPost}>Add post</button></div>\n            </div>\n            {Posts}\n        </div>\n    );\n}\n\n\nexport default MyPosts;  ","import React from 'react';\nimport s from \"./ProfileInfo.module.scss\";\n\nconst ProfileInfo = (props) => {\n    return (\n        <div className={s.profile}>\n            <img src=\"https://images.unsplash.com/photo-1520531158340-44015069e78e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjI0MX0&auto=format&fit=crop&w=1438&q=80\" alt=\"\" />\n            <div className={s.ava}>\n                ava + description\n        </div>\n\n        </div>\n\n    );\n}\n\n\nexport default ProfileInfo;  ","import React from 'react';\nimport MyPosts from './MyPosts/MyPosts'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n    return (\n        <div >\n            <ProfileInfo />\n            <MyPosts \n            post={props.ProfilePage.PostData} \n            newPostText={props.ProfilePage.newPostText}\n            updatePostText={props.updatePostText}\n            addPost={props.addPost} />\n        </div>\n\n    );\n}\n\n\nexport default Profile;  ","import React from 'react';\nimport s from \"./../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    let path = \"/Dialogs/\" + props.id;\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;  ","import React from 'react';\nimport s from \"./../Dialogs.module.css\";\n\n\nconst Message = (props) => {\n    return <div className={s.message}>{props.message}</div>\n}\n\nexport default Message;  ","import React from 'react';\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\n\n\nconst Dialogs = (props) => {\n\n    let dialogs = props.state.DialogsData.map(d => <DialogItem name={d.name} id={d.id} />)\n\n    let messages = props.state.MessageData.map(m => <Message message={m.message} />)\n    let AddMessage = () => alert('add message')\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogs}\n            </div>         \n            <div className={s.messagesItems}>\n            <textarea />\n            <button onClick={AddMessage}>Add message</button>\n            {messages}   \n            </div>\n        </div>\n    );\n}\n\nexport default Dialogs;  ","import React from 'react';\nimport s from \"./Music.module.css\";\n\n\nconst Music = (props) => {\n    return (\n        <div className={s.music}>\n            Music\n        </div>\n    );\n}\n\n\nexport default Music;  ","import React from 'react';\nimport s from \"./News.module.css\";\n\n\nconst News = (props) => {\n    return (\n        <div className={s.news}>\n            News\n        </div>\n    );\n}\n\n\nexport default News;  ","import React from 'react';\nimport s from \"./Settings.module.scss\";\n\n\nconst Settings = (props) => {\n    return (\n        <div className={s.settings}>\n            Settings\n        </div>\n    );\n}\n\n\nexport default Settings;  ","import React from 'react';\nimport './App.css';\nimport Header from './component/Header/header';\nimport Navbar from './component/Navbar/Navbar';\nimport Profile from './component/Profile/Profile';\nimport Dialogs from './component/Dialogs/Dialogs';\nimport Music from './component/Music/Music';\nimport News from './component/News/News';\nimport Settings from './component/Settings/Settings'\nimport { Route, BrowserRouter } from 'react-router-dom';\n\n\nconst App = (props) => {\n  return (\n    <BrowserRouter>\n      <div className=\"app-wrapper\">\n        <Header />\n        <Navbar state={props.state.NavbarPage} />\n        <div className=\"app-wrapper-content\">\n          <Route path='/Profile' render={()=><Profile \n          ProfilePage={props.state.ProfilePage} \n          updatePostText={props.updatePostText}\n          addPost = {props.addPost}/>} />\n          <Route path='/Dialogs' render={() => <Dialogs state={props.state.DialogsPage} />} />\n          <Route path='/Music' render={() => <Music/>} />\n          <Route path='/News' render={() => <News/>} />\n          <Route path='/Settings' render={() =><Settings/>} />\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\nimport state, { subscribe } from './redux/state';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { addPost, updatePostText } from './redux/state';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nlet rerenderEntiretree = (state) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App state={state} addPost={addPost}\n                updatePostText={updatePostText} />\n        </BrowserRouter>, document.getElementById('root'));\n\n}\n\nrerenderEntiretree(state);\n\nsubscribe(rerenderEntiretree);\n\n\n\n\n\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}